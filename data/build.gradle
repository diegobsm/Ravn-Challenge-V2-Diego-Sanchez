plugins {
    id 'java-library'
    id 'kotlin'
    id 'kotlin-kapt'
    id("com.apollographql.apollo").version("2.5.2")
}

java {
    sourceCompatibility = JavaVersion.VERSION_1_7
    targetCompatibility = JavaVersion.VERSION_1_7
}

apollo {
    // instruct the compiler to generate Kotlin models
    schemaFile = file("data/src/main/java/com/ravn/data/graphql/schema.json")
    rootPackageName = "com.ravn.challenge"
    generateKotlinModels.set(true)
}

dependencies {
    // Libs:
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    // Module Dependencies:
    implementation project(":core")

    // Common:
    implementation rootProject.ext.common.kotlin_stdlib_jdk7
    implementation rootProject.ext.common.core_ktlx

    // Coroutines:
    implementation rootProject.ext.coroutines.core
    implementation rootProject.ext.coroutines.android

    implementation rootProject.ext.apollo.apollo_runtime
    // Coroutines extensions for easier asynchronicity handling
    implementation rootProject.ext.apollo.apollo_coroutine

    // Room:
    implementation rootProject.ext.room.room_runtime
    kapt rootProject.ext.room.room_compiler
    implementation rootProject.ext.room.room_ktx

    // Di:
    implementation rootProject.ext.koin.koin
    implementation rootProject.ext.koin.koin_scope

    // Unit Testing:
    testImplementation rootProject.ext.testCommon.junit
    testImplementation rootProject.ext.testCommon.mockito_core
    testImplementation rootProject.ext.testCommon.mockito_kotlin
    testImplementation rootProject.ext.testCommon.mockito_inline
    testImplementation rootProject.ext.testCommon.core_testing
    testImplementation rootProject.ext.testCommon.test_coroutines
    testImplementation rootProject.ext.testCommon.koin_test
    testImplementation rootProject.ext.testCommon.test_core
    testImplementation rootProject.ext.testCommon.robolectric
    testImplementation rootProject.ext.testCommon.mockwebserver
}